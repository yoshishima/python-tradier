#!/usr/bin/env python

"""
Usage:
    tradier user balances
    tradier account <account_id> [<order_id>]
    tradier chain <symbol> [<expiration>]
    tradier quote <symbol>...
    tradier calendar <symbol>...
"""

import operator
import pprint
import json
import sys
import os

import docopt
import arrow

import tradier


def dumps(data):
    return json.dumps(
        data, sort_keys=True, indent=4, separators=(',', ': '))


def main(api, argv):
    if argv['user']:
        if argv['balances']:
            print(dumps(api.user.balances()))
            return

    if argv['account']:
        if argv['<order_id>']:
            print(api.accounts.order(argv['<account_id>'], argv['<order_id>']))
            return

        orders = api.accounts.orders(argv['<account_id>'])
        print(dumps(orders))
        return
        print(len(orders))

        print()
        for order in orders:

            if order['class'] == 'multileg':
                # legs = order['leg']
                # del order['leg']
                # print order.keys()
                # print order
                print()
                print(order)
                print()
                print(order['id'], order['symbol'], order['status'], order['class'],
                      order['strategy'], order['price'], order['type'])
                print()
                continue
                print()
                # for leg in order['leg']:
                for leg in legs:
                    print(leg)
                print()

            elif order['class'] == 'option':
                print()
                print(order)
                print()
                print(order['id'], order['symbol'], order['option_symbol'], order['side'], order['status'],
                      order['quantity'], order['class'], order['price'], order['type'])
                print()

        return

    if argv['quote']:
        class Quote(object):
            def __init__(self, data):
                self.data = data

            @property
            def mid(self):
                return (self.data['bid'] + self.data['ask']) / 2

            @property
            def last(self):
                return self.data['close'] or \
                    self.data['open'] or \
                    self.data['prevclose']

            @property
            def change(self):
                return ((self.mid - self.last) / self.last) * 100

        quotes = [Quote(x) for x in api.markets.quotes(argv['<symbol>'])]
        for q in reversed(sorted(quotes, key=lambda x: x.change)):
            print('%-6s %6.2f %6.2f %6.2f' % (
                q.data['symbol'], q.last, q.mid, q.change))
        return

    if argv['calendar']:
        api = tradier.Tradier(
            os.environ['TRADIER_ACCESS_TOKEN'],
            endpoint='beta')
        pprint.pprint(api.fundamentals.calendars(argv['<symbol>']))

    if argv['chain']:
        if not argv['<expiration>']:
            expirations = api.options.expirations(argv['<symbol>'])
            for expiration in expirations:
                print('%s - in %s days' % (
                    expiration, (arrow.get(expiration) - arrow.utcnow()).days))
            return

        contracts = api.options.chains(argv['<symbol>'], argv['<expiration>'])
        for contract in sorted(contracts, key=operator.itemgetter('strike')):
            print(contract['option_type'], contract['strike'],
                  contract['bid'], contract['ask'])
        return

if __name__ == '__main__':
    argv = docopt.docopt(__doc__)
    api = tradier.Tradier(os.environ['TRADIER_ACCESS_TOKEN'])
    sys.exit(main(api, argv))
